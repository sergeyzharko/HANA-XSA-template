#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const { logger } = require('../components/logger');
const debug = require('debug')('dmt-server:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8000');
app.set('port', port);
logger.info(`HTTP Server: ${port}`);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	const port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	const bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			logger.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			logger.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	const addr = server.address();
	const bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}

process.on('unhandledRejection', (reason, p) => {
	// I just caught an unhandled promise rejection, since we already have fallback handler for unhandled errors (see below),
	// let throw and let him handle that
	logger.error(`Unhandled Rejection at Promise: ${JSON.stringify(p)}`);
	logger.error(`Unhandled Rejection reason: ${reason}`);
	throw reason;
});
process.on('uncaughtException', error => {
	// I just received an error that was never handled, time to handle it and then decide whether a restart is needed
	logger.error(`Uncaught Exception: ${error}`);
	process.exit(1);
});